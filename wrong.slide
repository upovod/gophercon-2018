Вы пишете тесты неправильно*
17 Mar 2018
Tags: gophercon, go, tests, legacy, unit tests

Виталий Левченко
Team lead, mc² software (МегаФон.ТВ)
vitaliy@mc2soft.ru

* Зачем это всё?

* Зачем это всё?

.image bad_tests.jpg 580 _

* Обо мне

- Пишу на Go с 2012 года
- Устраивал Go митапы в Питере
- Работал с дейтингом, рекламой, видеостримингом
- Делаю разработку гибкой и приятной

* mc² software

.background mftv.png
⁠
⁠
⁠
.image einstein.jpg

* Почему я

- Везде разные проблемы
- Много экспериментирую
- Умею* делать хорошо

* Иллюзии

* #1: Тесты не нужны!

* #1: Тесты не нужны. Плюсы

- Нет тестов — нет проблем
- Не тратится время
- Ручная проверка

* #1: Тесты не нужны

.image jira.png 580 _

* #1: Тесты не нужны. Последствия

- Проверять все изменения руками
- Постоянно что-то ломается
- Много багов от QA и пользователей
- Тяжело локализовать баги

* #1: Тесты не нужны. Причины

- Быстро бежим
- Запутанная логика
- Масса сайд эффектов

* #1: Тесты не нужны. Причины

- Быстро бежим
- Запутанная логика
- Масса сайд эффектов
- Команда не умеет
 
* #1: Тесты не нужны. Вердикт

.image remove_tests.jpg

* #1: Тесты не нужны. Решение

- Может, и правда не нужны?
- Адаптировать код под тесты
- Учиться писать хорошие тесты

* #2: Мы любим TDD!

* #2: Мы любим TDD! Плюсы

.image tdd.jpg

* #2: Мы любим TDD! 

.code tdd.go

* #2: Мы любим TDD! Последствия

- Рвётся логика
- Непонятна картина в целом
- Непонятный flow исполнения 
- 100500 непонятных, но протестированных функций

* #2: Мы любим TDD! 

.code mocks.go 
# TODO

* #2: Мы любим TDD! Последствия

- Неприятно рефакторить
- ОЧЕНЬ дорого писать
- Не всегда помогает локализации бага
- Проверяются ненужные контракты
- Багов всё равно много

* #2: Мы любим TDD! Вердикт

.image remove_tests.jpg

* #2: Мы любим TDD! Решение

- Не портить логику ради тестов
- Проверять контракт функций, не реализацию

* #3: Всё покрываем тестами

* #3: Всё покрываем тестами

- Высокий сс == хороший код
- Уменьшается сс — запрет мержа

* #3: Всё покрываем тестами

.code bundler.go

* #3: Всё покрываем тестами

- Работает же!
- Append only тестирование
- Упал тест — чиним тест

* #3: Всё покрываем тестами. Последствия

- Очень долго
- Параллелить vs Race condition
- Результаты только в CI
- Долгая обратная связь
- Нестабильные тесты

* #3: Всё покрываем тестами. Вердикт

.image remove_tests.jpg

* #3: Всё покрываем тестами. Решение

- Рефакторить тесты
- Отделить внешние системы от логики
- Не проверять внешние системы

* #4: Плохо тестировать внешние системы

* #4: Плохо тестировать внешние системы. Плюсы

- Тесты стабильно работают
- Тесты работают быстро
- Не нужны тесты асинхронной логики

* #4: Плохо тестировать внешние системы. Минусы

 Error 1062: Duplicate entry '123456' for key 'subs_id_idx'
 
 json: cannot unmarshal number into Go value of type string
 
 invalid character '<' looking for beginning of value

* #4: Плохо тестировать внешние системы. Вердикт

.image write_tests.jpg

* #5: Надо просто писать тесты

* #5: Надо просто писать тесты! Плюсы

- Проверять код как есть
- Нет времени — пропускать тесты

* #5: Надо писать тесты! Минусы

.code xmsisdn.go

* #5: Надо писать тесты! Минусы

- Нечитаемый код тестов
- Нет доверия к результатам тестов

* #5: Надо писать тесты! Вердикт

.image remove_tests.jpg

* Зачем нам тесты?

* Зачем нам тесты

- Проверить работу
- Локализация бага
- Ускорение поставки

* Зачем нам тесты

- Доверие к коду!
.image mason.png

* Что проверять?

* А что фиксировано?

- Ключевая бизнес логика 
- Внешний API
- API внешних систем

* Что проверять?

- Worst case analysis
- Критичную бизнесу логику
- Фичи, а не код
- Интеграцию с внешними системами

* Как проверяем

* Функциональные тесты

.code gophers.go

* Функциональные тесты

- Фичи = Функциональные тесты
- Только понятные кейсы
- Обёртка для контекста и проверки

* Юнит тесты

- Логика = Юнит тесты
- Табличные тесты
- Клиенты = неизолированные юнит тесты
- Избегать сайд эффектов 
- Никаких моков!

* Как рефакторить

- Удалять тесты
- Отделять логику от внешних систем
- Упрощать создание контекста в тестах
- Параллелить тесты
- Уменьшать тестовую БД

* Плюшки

- Code coverage показывает мёртвый код
- Быстрый CI и локальные тесты
- Нестабильные тесты в отдельной √
- Функциональные тесты в мониторинге

* А ручные тесты?

- Так надо, но однократно
- Интеграционные тесты
- Worst case analysis
- Доверить QA ревью тест кейсов

* Итого

- Проверять скрупулёзно
- Проверять фичи, а не строки
- Функциональные тесты
- Ключевая логика — unit тесты
- Внешние системы — отдельные unit тесты

* TDD

- Удобно
- Упрощает совместную работу
- Смело удалять тесты после релиза

* Вывод
.image resume.jpg
